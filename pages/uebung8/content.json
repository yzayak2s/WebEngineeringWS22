{
  "html": {
    "headings": {
      "content": "Die Überschrift-Elemente bestehen aus sechs verschiedenen Levels. Das 'h1'-Element ist die Überschrift mit der höchsten Gewichtung und das 'h6'-Element mit der kleinsten. Ein Überschriften-Element beschreibt das Thema des Bereiches, welcher der Überschrift folgt. Überschriften können auch verwendet werden, um ein Inhaltsverzeichnis für ein Dokument automatisch zu erstellen.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/HTML/Element/h1-h6"
      ]
    },
    "paragraph": {
      "content": "Das 'p'-Element erzeugt einen Absatz, den zusammenhängenden Abschnitt eines längeren Textes. In HTML kann ein 'p'-Element jedoch für jedwede Art von zu gruppierendem, zusammenhängendem Inhalt genutzt werden, zum Beispiel Bilder oder Formularfelder.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/HTML/Element/p"
      ]
    }
  },
  "css": {
    "selectors": {
      "content": "Selektoren definieren, auf welche Elemente eine Reihe von CSS Regeln angewendet wird.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/CSS/CSS_Selectors"
      ]
    },
    "colors": {
      "content": "Der CSS Datentyp Color beschreibt eine Farbe im sRGB Farbraum. Eine Farbe kann auf eine von drei Arten beschrieben werden: Schlüsselworte, rgb und rgba, hsl und hsla. ...",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/CSS/Farben"
      ]
    }
  },
  "javascript": {
    "function": {
      "content": "Funktionen sind ein Grundbaustein in JavaScript. Eine Funktion ist eine Prozedur - eine Reihe von Anweisungen, um eine Aufgabe auszuführen oder eine Wert auszurechnen. Um Funktionen zu verwenden, müssen diese im Scope (Gültigkeitsbereich) deklariert werden, in dem sie ausgeführt werden soll.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/JavaScript/Guide/Funktionen"
      ]
    },
    "object": {
      "content": "Ein Objekt ist eine Sammlung von zusammenhängenden Daten und/oder Funktionalitäten. Diese bestehen üblicherweise aus verschiedenen Variablen und Funktionen, die Eigenschaften und Methoden genannt werden, wenn sie sich innerhalb von Objekten befinden.",
      "references": [
        "https://developer.mozilla.org/de/docs/Learn/JavaScript/Objects/Basics"
      ]
    }
  },
  "dom": {
    "introduction": {
      "content": "The Document Object Model (DOM) is the data representation of the objects that comprise the structure and content of a document on the web. This guide will introduce the DOM, look at how the DOM represents an HTML document in memory and how to use APIs to create web content and applications.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"
      ]
    },
    "tree": {
      "content": "A DOM tree is a kind of tree whose nodes represent an HTML or XML document's contents. Each HTML or XML document has a unique DOM tree representation. For example, the following document...",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Using_the_W3C_DOM_Level_1_Core"
      ]
    }
  },
  "ecmascript": {
    "introduction": {
      "content": "ECMAScript is a scripting language specification on which JavaScript is based. Ecma International is in charge of standardizing ECMAScript.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Glossary/ECMAScript"
      ]
    }
  },
  "async js": {
    "promises": {
      "content": "A Promise is an object representing the eventual completion or failure of an asynchronous operation. Since most people are consumers of already-created promises, this guide will explain consumption of returned promises before explaining how to create them.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"
      ]
    },
    "async": {
      "content": "In this module, we take a look at asynchronous JavaScript, why it is important, and how it can be used to effectively handle potential blocking operations, such as fetching resources from a server.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous"
      ]
    },
    "fetch": {
      "content": "The global fetch() method starts the process of fetching a resource from the network, returning a promise which is fulfilled once the response is available.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/API/fetch"
      ]
    },
    "callback": {
      "content": "A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Glossary/Callback_function"
      ]
    },
    "class": {
      "content": "Classes are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but also have some syntax and semantics that are unique to classes.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"
      ]
    }
  }
}